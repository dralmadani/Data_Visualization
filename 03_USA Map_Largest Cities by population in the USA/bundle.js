(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://cdn.jsdelivr.net/npm/us-atlas@3.0.0/states-10m.json';

  // const jsonUrl =
  //   'https://cdn.jsdelivr.net/npm/us-atlas@3.0.0/states-albers-10m.json';

  const useUSGeo = () => {
    const [data, setData] = React$1.useState(null);
  	// console.log(data);
    
    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topojsonData => {
        const { states } = topojsonData.objects;
        // console.log(topojsonData);
        setData(topojson.feature(topojsonData, states));
      });
    }, []);

    return data;
  };

  const csvUrl = 'https://gist.githubusercontent.com/dralmadani/c04f95746e2f36b040d3d764ab7b9c62/raw/0ac9460c0bce221efb38a8a75beeb00d6c315023/LargestCitiesPopulation2020USwithLongitude_Latitude.csv';
  //const csvUrl = 'https://gist.githubusercontent.com/dralmadani/fa040a3a109bd938347572012a24f2fc/raw/211e765d3702af40b6553b3397abe4b95dbcc80b/CitiesPopulation2020USA.csv';



  const useData = () => {
    const [data, setData] = React$1.useState(null);
  console.log(data);
    React$1.useEffect(() => {
      const row = d => {
        
        d.latitude = +d["latitude"];
        //d["longitude"] = +d["longitude"];
        //if(d.longitude > 0) {
        	d["longitude"] = +d["longitude"] * -1;
        //}
        
        d.pop2020 = +d.pop2020;
        d.pop2010 = +d.pop2010;
        return d;
        
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);
    
  //   console.log(data);
    
  //   for (let i in data)
  //   	{console.log(data[i].armed);}
    return data;
  };

  // Multiple types of projection, commented out for easy switching
  // const projection = geoIdentity().reflectY(true);
  // const projection = geoIdentity();
  // const projection = geoNaturalEarth1();
  //const projection = geoAlbersUsa();
  const projection = d3.geoAlbers();
  //const projection = geoNaturalEarth1();
  //const path = geoPath(projection);


  const path = d3.geoPath(projection);

  const Marks = ({ USGeo, data,sizeScale, sizeValue }) => {
    
   //projection.fitExtent([[0,0],[960,500]], USGeo);
    // console.log(USGeo);
    return (
     
      React.createElement( 'g', { className: "marks" },
        USGeo.features.map(feature => (
          React.createElement( 'path', { d: path(feature) })
        )),


        data.map(d => {

  				const [x, y] = projection([d.longitude, d.latitude]);
          //console.log(x,y);
          return React.createElement( 'circle', { cx: x, cy: y, r: sizeScale(sizeValue(d)) });

    			
   
        })
        
      )
    );
  };

  const width = 960;
  const height = 500;
  const maxRadius = 20;

  const App = () => {
    const USGeo = useUSGeo();
    const data = useData();

    if (!USGeo || !data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    const sizeValue = d => d.pop2020;
    const sizeScale = d3.scaleSqrt()
      .domain([0, d3.max(data, sizeValue)])
      .range([0, maxRadius]);
    
     console.log(data[0]);
    
    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( Marks, { 
          USGeo: USGeo, data: data, sizeScale: sizeScale, sizeValue: sizeValue })
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,